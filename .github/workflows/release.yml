name: Release
run-name: Release ${{ github.ref_name }}
on:
  push:
    branches:
      - 'main'
jobs:

  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      TAG: ${{ steps.versions.outputs.TAG }}
      PKG_VER: ${{ steps.versions.outputs.PKG_VER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: 'true'
          fetch-depth: 0

      - name: Versions
        id: versions
        run: |
          export CURRENT_TAG=$(git describe --tags --abbrev=0)
          export PKG_VER=v$(cat Cargo.toml | grep -A 5 package] | grep version | cut -d '=' -f 2 | tr -d '"' | tr -d " ")
          echo "Current tag $CURRENT_TAG"
          echo "Package version $PKG_VER"
          #
          echo "PKG_VER=$PKG_VER" >> $GITHUB_OUTPUT
          if [ $CURRENT_TAG == $PKG_VER  ];
            then
              echo "Tag is up to date. Nothing to do.";
              export TAG=old;
            else
              echo "Tag was updated.";
              export TAG=new;
            fi
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Create/update tag
        id: tag
        if: ${{ steps.versions.outputs.TAG == 'new' }}
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ steps.versions.outputs.PKG_VER }}',
                sha: context.sha
              })
            } catch (err) {
              if (err.status !== 422) throw err;
              console.log("Tag already exists, updating")
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ steps.versions.outputs.PKG_VER }}',
                sha: context.sha
              });
            }

  create-release:
    if: ${{ needs.tag.outputs.TAG == 'new' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [tag]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.tag.outputs.PKG_VER }}
          release_name: ${{ needs.tag.outputs.PKG_VER }}
          draft: true
          prerelease: true

      - name: Log
        run: |
          echo "tag result:   ${{ needs.tag.outputs.TAG }}"
          echo "pkg version:  ${{ needs.tag.outputs.PKG_VER }}"

  build-linux-all:
    runs-on: parity-large
    needs: [create-release, tag]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: install linux deps
        run: |
          sudo apt-get update && sudo apt-get install -y cmake ninja-build \
          curl git libssl-dev pkg-config clang lld nodejs npm musl

      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rust-src
          target: wasm32-unknown-emscripten

      - name: versions
        run: |
          rustup show
          cargo --version
          cmake --version
          echo "bash:" && bash --version
          echo "ninja:" && ninja --version
          echo "clang:" && clang --version

      - name: build revive-llvm
        run: make install-llvm-builder

      # Restore cache


      - name: llvm-musl-cache restore
        id: llvm-musl-cache
        uses: actions/cache/restore@v4
        with:
          path: target-llvm/musl/target-final
          key: llvm-linux-musl-${{ hashFiles('crates/solidity/**') }}

      - name: llvm-emscripten-cache restore
        id: llvm-emscripten-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            target-llvm/emscripten/target-final
            emsdk
          key: llvm-linux-emscripten-${{ hashFiles('crates/solidity/**') }}

      # Build LLVM


      - name: Build musl LLVM
        if: steps.llvm-musl-cache.outputs.cache-hit != 'true'
        run: |
          revive-llvm --target-env musl clone
          revive-llvm --target-env musl build --llvm-projects lld --llvm-projects clang

      - name: Build emscripten LLVM
        if: steps.llvm-emscripten-cache.outputs.cache-hit != 'true'
        run: |
          revive-llvm --target-env emscripten clone
          source emsdk/emsdk_env.sh
          revive-llvm --target-env emscripten build --llvm-projects lld

      # Save cache


      - name: llvm-musl-cache save
        if: steps.llvm-musl-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: target-llvm/musl/target-final
          key: llvm-linux-musl-${{ hashFiles('crates/solidity/**') }}

      - name: llvm-emscripten-cache save
        if: steps.llvm-emscripten-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            target-llvm/emscripten/target-final
            emsdk
          key: llvm-linux-emscripten-${{ hashFiles('crates/solidity/**') }}

      # Build revive

      - name: download solc
        run: |
          curl -o solc https://github.com/ethereum/solidity/releases/download/v0.8.28/solc-static-linux
          chmod +x solc
          echo "$PWD" >> $GITHUB_PATH

      - name: build musl
        run: |
          mkdir resolc-out
          docker run -v $PWD:/opt/revive messense/rust-musl-cross:x86_64-musl /bin/bash -c "
           cd /opt/revive
           apt update && apt upgrade -y && apt install -y pkg-config
           export LLVM_SYS_181_PREFIX=/opt/revive/target-llvm/musl/target-final
           make install-bin
           cp /root/.cargo/bin/resolc /opt/revive/resolc-out/resolc
           "

      - name: build wasm
        run: |
          export LLVM_SYS_181_PREFIX=$PWD/target-llvm/musl/target-final
          export REVIVE_LLVM_TARGET_PREFIX=$PWD/target-llvm/emscripten/target-final
          source emsdk/emsdk_env.sh
          rustup target add wasm32-unknown-emscripten
          make install-wasm

      # Upload

      - name: upload resolc
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./resolc-out/resolc
          asset_name: resolc
          asset_content_type: application/octet-stream

      - name: upload resolc.js
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/wasm32-unknown-emscripten/release/resolc.js
          asset_name: resolc.js
          asset_content_type: application/octet-stream

      - name: upload resolc.wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/wasm32-unknown-emscripten/release/resolc.wasm
          asset_name: resolc.wasm
          asset_content_type: application/octet-stream

      - name: upload resolc_web.js
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/wasm32-unknown-emscripten/release/resolc_web.js
          asset_name: resolc_web.js
          asset_content_type: application/octet-stream