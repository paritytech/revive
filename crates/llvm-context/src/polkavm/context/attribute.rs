//! The LLVM attribute.

use serde::Deserialize;
use serde::Serialize;

/// The LLVM attribute.
/// In order to check the real order in a new major version of LLVM, find the `Attributes.inc` file
/// inside of the LLVM build directory. This order is actually generated during the building.
#[derive(Debug, Serialize, Deserialize, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Attribute {
    // FirstEnumAttr = 1,
    AllocAlign = 1,
    AllocatedPointer = 2,
    AlwaysInline = 3,
    Builtin = 4,
    Cold = 5,
    Convergent = 6,
    CoroDestroyOnlyWhenComplete = 7,
    CoroElideSafe = 8,
    DeadOnReturn = 9,
    DeadOnUnwind = 10,
    DisableSanitizerInstrumentation = 11,
    FnRetThunkExtern = 12,
    Hot = 13,
    HybridPatchable = 14,
    ImmArg = 15,
    InReg = 16,
    InlineHint = 17,
    JumpTable = 18,
    MinSize = 19,
    MustProgress = 20,
    Naked = 21,
    Nest = 22,
    NoAlias = 23,
    NoBuiltin = 24,
    NoCallback = 25,
    NoCfCheck = 26,
    NoDivergenceSource = 27,
    NoDuplicate = 28,
    NoExt = 29,
    NoFree = 30,
    NoImplicitFloat = 31,
    NoInline = 32,
    NoMerge = 33,
    NoProfile = 34,
    NoRecurse = 35,
    NoRedZone = 36,
    NoReturn = 37,
    NoSanitizeBounds = 38,
    NoSanitizeCoverage = 39,
    NoSync = 40,
    NoUndef = 41,
    NoUnwind = 42,
    NonLazyBind = 43,
    NonNull = 44,
    NullPointerIsValid = 45,
    OptForFuzzing = 46,
    OptimizeForDebugging = 47,
    OptimizeForSize = 48,
    OptimizeNone = 49,
    PresplitCoroutine = 50,
    ReadNone = 51,
    ReadOnly = 52,
    Returned = 53,
    ReturnsTwice = 54,
    SExt = 55,
    SafeStack = 56,
    SanitizeAddress = 57,
    SanitizeHWAddress = 58,
    SanitizeMemTag = 59,
    SanitizeMemory = 60,
    SanitizeNumericalStability = 61,
    SanitizeRealtime = 62,
    SanitizeRealtimeBlocking = 63,
    SanitizeThread = 64,
    SanitizeType = 65,
    ShadowCallStack = 66,
    SkipProfile = 67,
    Speculatable = 68,
    SpeculativeLoadHardening = 69,
    StackProtect = 70,
    StackProtectReq = 71,
    StackProtectStrong = 72,
    StrictFP = 73,
    SwiftAsync = 74,
    SwiftError = 75,
    SwiftSelf = 76,
    WillReturn = 77,
    Writable = 78,
    WriteOnly = 79,
    ZExt = 80,
    //LastEnumAttr = 80,
    //FirstTypeAttr = 81,
    ByRef = 81,
    ByVal = 82,
    ElementType = 83,
    InAlloca = 84,
    Preallocated = 85,
    StructRet = 86,
    //LastTypeAttr = 86,
    //FirstIntAttr = 87,
    Alignment = 87,
    AllocKind = 88,
    AllocSize = 89,
    Captures = 90,
    Dereferenceable = 91,
    DereferenceableOrNull = 92,
    Memory = 93,
    NoFPClass = 94,
    StackAlignment = 95,
    UWTable = 96,
    VScaleRange = 97,
    //LastIntAttr = 97,
    //FirstConstantRangeAttr = 98,
    Range = 98,
    //LastConstantRangeAttr = 98,
    //FirstConstantRangeListAttr = 99,
    Initializes = 99,
    //LastConstantRangeListAttr = 99,
}

impl TryFrom<&str> for Attribute {
    type Error = String;

    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
            "AlwaysInline" => Ok(Attribute::AlwaysInline),
            "Cold" => Ok(Attribute::Cold),
            "Hot" => Ok(Attribute::Hot),
            "MinSize" => Ok(Attribute::MinSize),
            "OptimizeForSize" => Ok(Attribute::OptimizeForSize),
            "NoInline" => Ok(Attribute::NoInline),
            "WillReturn" => Ok(Attribute::WillReturn),
            "NoReturn" => Ok(Attribute::NoReturn),
            "MustProgress" => Ok(Attribute::MustProgress),
            _ => Err(value.to_owned()),
        }
    }
}
